{"name": "test_add_img", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\test\\example.png\n  (Session info: chrome=113.0.5672.93)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00488893+48451]\n\t(No symbol) [0x0041B8A1]\n\t(No symbol) [0x00325058]\n\t(No symbol) [0x0034BBCF]\n\t(No symbol) [0x0036A2BC]\n\t(No symbol) [0x00349586]\n\t(No symbol) [0x0036A614]\n\t(No symbol) [0x0037C482]\n\t(No symbol) [0x0036A0B6]\n\t(No symbol) [0x00347E08]\n\t(No symbol) [0x00348F2D]\n\tGetHandleVerifier [0x006E8E3A+2540266]\n\tGetHandleVerifier [0x00728959+2801161]\n\tGetHandleVerifier [0x0072295C+2776588]\n\tGetHandleVerifier [0x00512280+612144]\n\t(No symbol) [0x00424F6C]\n\t(No symbol) [0x004211D8]\n\t(No symbol) [0x004212BB]\n\t(No symbol) [0x00414857]\n\tBaseThreadInitThunk [0x76EA0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77767B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77767B3E+238]\n\nScreenshot: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.png\nPageSource: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.html", "trace": "fn = <selene.core.wait.Command object at 0x000001CAB03A5890>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000001CAB03A5890>\nentity = <selene.core.entity.Element object at 0x000001CAB03A56D0>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000001CAB03A56D0>\n\n>   self.wait.command('send keys', lambda element: element().send_keys(*value))\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:473: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"848dd6e5ce9319d4b3d9a154b9006009\", element=\"5E64969DF13FFD129551779DA347A30F_element_93\")>\nvalue = ('C:\\\\Users\\\\DronovNA\\\\PycharmProjects\\\\qa_guru_python_4_11_Jenkins\\\\test\\\\example.png',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"848dd6e5ce9319d4b3d9a154b9006009\", element=\"5E64969DF13FFD129551779DA347A30F_element_93\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '5E64969DF13FFD129551779DA347A30F_element_93', 'sessionId': '848dd6e5ce9319d4b3d9a154b9006009', 'text': 'C:\\\\Us...novNA\\\\PycharmProjects\\\\qa_guru_python_4_11_Jenkins\\\\test\\\\example.png', 'value': ['C', ':', '\\\\', 'U', 's', 'e', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"848dd6e5ce9319d4b3d9a154b9006009\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '5E64969DF13FFD129551779DA347A30F_element_93', 'text': 'C:\\\\Users\\\\DronovNA\\\\PycharmProjects\\\\qa_guru_python_4_11_Jenkins\\\\test\\\\example.png', 'value': ['C', ':', '\\\\', 'U', 's', 'e', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CAAF3188D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77767B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77767B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\test\\example.png\nE         (Session info: chrome=113.0.5672.93)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00488893+48451]\nE       \t(No symbol) [0x0041B8A1]\nE       \t(No symbol) [0x00325058]\nE       \t(No symbol) [0x0034BBCF]\nE       \t(No symbol) [0x0036A2BC]\nE       \t(No symbol) [0x00349586]\nE       \t(No symbol) [0x0036A614]\nE       \t(No symbol) [0x0037C482]\nE       \t(No symbol) [0x0036A0B6]\nE       \t(No symbol) [0x00347E08]\nE       \t(No symbol) [0x00348F2D]\nE       \tGetHandleVerifier [0x006E8E3A+2540266]\nE       \tGetHandleVerifier [0x00728959+2801161]\nE       \tGetHandleVerifier [0x0072295C+2776588]\nE       \tGetHandleVerifier [0x00512280+612144]\nE       \t(No symbol) [0x00424F6C]\nE       \t(No symbol) [0x004211D8]\nE       \t(No symbol) [0x004212BB]\nE       \t(No symbol) [0x00414857]\nE       \tBaseThreadInitThunk [0x76EA0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77767B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77767B3E+238]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.step('Добавление фото')\n    def test_add_img():\n>       browser.element(\"#uploadPicture\").send_keys(os.getcwd() + '\\example.png')\n\ntest_demoForm_with_allure.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:473: in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:154: in command\n    self.for_(Command(description, fn))\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000001CAB03A5890>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\test\\example.png\nE                     (Session info: chrome=113.0.5672.93)\nE                   Stacktrace:\nE                   Backtrace:\nE                   \tGetHandleVerifier [0x00488893+48451]\nE                   \t(No symbol) [0x0041B8A1]\nE                   \t(No symbol) [0x00325058]\nE                   \t(No symbol) [0x0034BBCF]\nE                   \t(No symbol) [0x0036A2BC]\nE                   \t(No symbol) [0x00349586]\nE                   \t(No symbol) [0x0036A614]\nE                   \t(No symbol) [0x0037C482]\nE                   \t(No symbol) [0x0036A0B6]\nE                   \t(No symbol) [0x00347E08]\nE                   \t(No symbol) [0x00348F2D]\nE                   \tGetHandleVerifier [0x006E8E3A+2540266]\nE                   \tGetHandleVerifier [0x00728959+2801161]\nE                   \tGetHandleVerifier [0x0072295C+2776588]\nE                   \tGetHandleVerifier [0x00512280+612144]\nE                   \t(No symbol) [0x00424F6C]\nE                   \t(No symbol) [0x004211D8]\nE                   \t(No symbol) [0x004212BB]\nE                   \t(No symbol) [0x00414857]\nE                   \tBaseThreadInitThunk [0x76EA0099+25]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77767B6E+286]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77767B3E+238]\nE                   \nE                   Screenshot: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.png\nE                   PageSource: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "Добавление фото", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\test\\example.png\n  (Session info: chrome=113.0.5672.93)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00488893+48451]\n\t(No symbol) [0x0041B8A1]\n\t(No symbol) [0x00325058]\n\t(No symbol) [0x0034BBCF]\n\t(No symbol) [0x0036A2BC]\n\t(No symbol) [0x00349586]\n\t(No symbol) [0x0036A614]\n\t(No symbol) [0x0037C482]\n\t(No symbol) [0x0036A0B6]\n\t(No symbol) [0x00347E08]\n\t(No symbol) [0x00348F2D]\n\tGetHandleVerifier [0x006E8E3A+2540266]\n\tGetHandleVerifier [0x00728959+2801161]\n\tGetHandleVerifier [0x0072295C+2776588]\n\tGetHandleVerifier [0x00512280+612144]\n\t(No symbol) [0x00424F6C]\n\t(No symbol) [0x004211D8]\n\t(No symbol) [0x004212BB]\n\t(No symbol) [0x00414857]\n\tBaseThreadInitThunk [0x76EA0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77767B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77767B3E+238]\n\nScreenshot: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.png\nPageSource: file://C:\\Users\\DronovNA\\.selene\\screenshots\\1683844395092\\1683844395092.html\n\n", "trace": "  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\test\\test_demoForm_with_allure.py\", line 55, in test_add_img\n    browser.element(\"#uploadPicture\").send_keys(os.getcwd() + '\\example.png')\n  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 473, in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 154, in command\n    self.for_(Command(description, fn))\n  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\DronovNA\\PycharmProjects\\qa_guru_python_4_11_Jenkins\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1683844438525, "stop": 1683844442662}], "start": 1683844438525, "stop": 1683844442664, "uuid": "ea5eabc4-9601-4008-865a-973247ca0bcf", "historyId": "ce4e442342cd224478a52055bf4b0f39", "testCaseId": "ce4e442342cd224478a52055bf4b0f39", "fullName": "test_demoForm_with_allure#test_add_img", "labels": [{"name": "suite", "value": "test_demoForm_with_allure"}, {"name": "host", "value": "DESKTOP-GJ1NPP2"}, {"name": "thread", "value": "10036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_demoForm_with_allure"}]}